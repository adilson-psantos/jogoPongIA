let bola; // Variável para armazenar a posição da bola
let velocidadeBolaX, velocidadeBolaY; // Variáveis para a velocidade da bola
let larguraRaquete = 10, alturaRaquete = 80; // Tamanho das raquetes
let espessuraBarra = 5; // Espessura das barras superior e inferior
let posicaoJogadorY, posicaoComputadorY; // Posições das raquetes
let pontosJogador = 0; // Pontuação do jogador
let pontosComputador = 0; // Pontuação do computador
let fundo; // Variável para armazenar a imagem de fundo
let jogadorImg, computadorImg, bolaImg; // Variáveis para armazenar as imagens das raquetes e bola
let anguloBola = 0; // Variável para armazenar o ângulo de rotação da bola
let somColisao; // Variável para armazenar o som de colisão

function preload() {
    fundo = loadImage('assets/fundo2.png'); // Carregando a imagem de fundo
    jogadorImg = loadImage('assets/barra01.png'); // Carregando a imagem da raquete do jogador
    computadorImg = loadImage('assets/barra02.png'); // Carregando a imagem da raquete do computador
    bolaImg = loadImage('assets/bola.png'); // Carregando a imagem da bola
    somColisao = loadSound('assets/sounds/colisao.mp3'); // Carrega o som de colisão antes de iniciar o jogo
}

function setup() {
    createCanvas(800, 400); // Cria o canvas
    resetarBola(); // Inicializa a posição e velocidade da bola
    posicaoJogadorY = height / 2 - alturaRaquete / 2; // Centraliza a posição da raquete do jogador
    posicaoComputadorY = height / 2 - alturaRaquete / 2; // Centraliza a posição da raquete do computador
}

function draw() {
    imageMode(CORNER); // Define o modo de imagem para desenhar a partir do canto superior esquerdo
    image(fundo, 0, 0, width, height); // Desenha a imagem de fundo
    desenharBarras(); // Desenha as barras superior e inferior
    desenharBola(); // Desenha a bola
    desenharRaquetes(); // Desenha as raquetes
    moverBola(); // Move a bola
    moverRaqueteComputador(); // Move a raquete do computador
    verificarColisoes(); // Verifica colisões com raquetes e barras

    // Movimentação contínua da raquete do jogador
    posicaoJogadorY = constrain(mouseY - alturaRaquete / 2, 0, height - alturaRaquete);

    // Exibir pontuação
    textSize(32);
    fill(255);
    textAlign(CENTER, TOP);
    text(pontosJogador, width / 4, 20); // Pontuação do jogador
    text(pontosComputador, (width / 4) * 3, 20); // Pontuação do computador
}

function resetarBola() {
    bola = createVector(width / 2, height / 2); // Centraliza a posição da bola
    velocidadeBolaX = random([-5, 5]); // Define a velocidade inicial em X
    velocidadeBolaY = random(-3, 3); // Define a velocidade inicial em Y
}

function desenharBarras() {
    fill(color('#2b3fd6')); // Define a cor das barras superior e inferior
    noStroke(); // Remove bordas das barras
    rect(0, 0, width, espessuraBarra, 5); // Barra superior
    rect(0, height - espessuraBarra, width, espessuraBarra, 5); // Barra inferior
}

function desenharBola() {
    anguloBola += velocidadeBolaX * 0.1; // Ajusta o ângulo baseado na velocidade para simular rotação
    push(); // Salva o estado atual do canvas
    translate(bola.x, bola.y); // Move a origem para a posição da bola
    rotate(anguloBola); // Rotaciona a bola com base no ângulo calculado
    imageMode(CENTER); // Centraliza a imagem da bola
    image(bolaImg, 0, 0, 20, 20); // Desenha a bola com rotação
    pop(); // Restaura o estado original do canvas
}

function desenharRaquetes() {
    image(jogadorImg, 30, posicaoJogadorY, larguraRaquete, alturaRaquete); // Desenha a raquete do jogador
    image(computadorImg, width - 40, posicaoComputadorY, larguraRaquete, alturaRaquete); // Desenha a raquete do computador
}

function moverBola() {
    bola.x += velocidadeBolaX; // Move a bola no eixo X
    bola.y += velocidadeBolaY; // Move a bola no eixo Y

    if (bola.y < espessuraBarra || bola.y > height - espessuraBarra) {
        velocidadeBolaY *= -1; // Inverte a direção vertical da bola ao bater nas barras
    }

    if (bola.x < 0) {
        pontosComputador++; // Computador ganha ponto
        resetarBola(); // Reinicia a posição da bola
    }

    if (bola.x > width) {
        pontosJogador++; // Jogador ganha ponto
        resetarBola(); // Reinicia a posição da bola
    }
}

function verificarColisoes() {
    if (bola.x - 10 < 40 && bola.y > posicaoJogadorY && bola.y < posicaoJogadorY + alturaRaquete) {
        velocidadeBolaX *= -1; // Inverte a direção horizontal da bola
        alterarVelocidadeBola(); // Ajusta a velocidade da bola após a colisão
        let diferencaY = bola.y - (posicaoJogadorY + alturaRaquete / 2);
        velocidadeBolaY = diferencaY * 0.2; // Ajusta a velocidade vertical
        bola.x = 40 + 10; // Ajusta a posição da bola para fora da raquete
        somColisao.play(); // Toca o som de colisão ao bater na raquete do jogador
    }

    if (bola.x + 10 > width - 50 && bola.y > posicaoComputadorY && bola.y < posicaoComputadorY + alturaRaquete) {
        velocidadeBolaX *= -1; // Inverte a direção horizontal da bola
        alterarVelocidadeBola(); // Ajusta a velocidade da bola após a colisão
        let diferencaY = bola.y - (posicaoComputadorY + alturaRaquete / 2);
        velocidadeBolaY = diferencaY * 0.2; // Ajusta a velocidade vertical
        bola.x = width - 50 - 10; // Ajusta a posição da bola para fora da raquete
        somColisao.play(); // Toca o som de colisão ao bater na raquete do computador
    }
}

function moverRaqueteComputador() {
    let velocidadeComputador = 3; // Define a velocidade da raquete do computador
    if (bola.y < posicaoComputadorY + alturaRaquete / 2 - 10) {
        posicaoComputadorY -= velocidadeComputador; // Move a raquete para cima
    } else if (bola.y > posicaoComputadorY + alturaRaquete / 2 + 10) {
        posicaoComputadorY += velocidadeComputador; // Move a raquete para baixo
    }
    posicaoComputadorY = constrain(posicaoComputadorY, 0, height - alturaRaquete); // Mantém a raquete dentro da tela
}

function alterarVelocidadeBola() {
    let incrementoVelocidade = random(0.5, 1.5); // Ajusta a velocidade após colisão
    velocidadeBolaX = velocidadeBolaX < 0 ? -incrementoVelocidade : incrementoVelocidade;
    velocidadeBolaY = random(-3, 3); // Define uma nova velocidade vertical aleatória
}
